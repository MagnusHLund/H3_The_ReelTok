// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using reeltok.api.users.Data;

#nullable disable

namespace UsersServiceApi.Migrations
{
    [DbContext(typeof(UserDBContext))]
    partial class UserDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("reeltok.api.users.Entities.LikedVideo", b =>
                {
                    b.Property<long>("LikedVideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LikedVideoId"));

                    b.HasKey("LikedVideoId");

                    b.ToTable("LikedVideos");
                });

            modelBuilder.Entity("reeltok.api.users.Entities.Subscription", b =>
                {
                    b.Property<long>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SubscriptionId"));

                    b.HasKey("SubscriptionId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("reeltok.api.users.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("reeltok.api.users.Entities.LikedVideo", b =>
                {
                    b.OwnsOne("reeltok.api.users.ValueObjects.LikedDetails", "LikedVideoDetails", b1 =>
                        {
                            b1.Property<long>("LikedVideoId")
                                .HasColumnType("bigint");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("VideoId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("LikedVideoId");

                            b1.HasIndex("UserId");

                            b1.ToTable("LikedVideos");

                            b1.WithOwner()
                                .HasForeignKey("LikedVideoId");

                            b1.HasOne("reeltok.api.users.Entities.User", null)
                                .WithMany()
                                .HasForeignKey("UserId")
                                .OnDelete(DeleteBehavior.Restrict)
                                .IsRequired();
                        });

                    b.Navigation("LikedVideoDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("reeltok.api.users.Entities.Subscription", b =>
                {
                    b.OwnsOne("reeltok.api.users.ValueObjects.SubscribptionDetails", "SubDetails", b1 =>
                        {
                            b1.Property<long>("SubscriptionId")
                                .HasColumnType("bigint");

                            b1.Property<Guid>("SubscriberUserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("SubscribingToUserId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("SubscriptionId");

                            b1.HasIndex("SubscriberUserId");

                            b1.HasIndex("SubscribingToUserId");

                            b1.ToTable("Subscriptions");

                            b1.HasOne("reeltok.api.users.Entities.User", null)
                                .WithMany()
                                .HasForeignKey("SubscriberUserId")
                                .OnDelete(DeleteBehavior.Restrict)
                                .IsRequired();

                            b1.HasOne("reeltok.api.users.Entities.User", null)
                                .WithMany()
                                .HasForeignKey("SubscribingToUserId")
                                .OnDelete(DeleteBehavior.Restrict)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("SubscriptionId");
                        });

                    b.Navigation("SubDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("reeltok.api.users.Entities.User", b =>
                {
                    b.OwnsOne("reeltok.api.users.ValueObjects.UserDetails", "UserDetails", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ProfilePictureUrl")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ProfileUrl")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("UserName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.OwnsOne("reeltok.api.users.ValueObjects.HiddenUserDetails", "HiddenDetails", b2 =>
                                {
                                    b2.Property<Guid>("UserDetailsUserId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Email")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(100)")
                                        .HasColumnName("Email");

                                    b2.HasKey("UserDetailsUserId");

                                    b2.ToTable("Users");

                                    b2.WithOwner()
                                        .HasForeignKey("UserDetailsUserId");
                                });

                            b1.Navigation("HiddenDetails")
                                .IsRequired();
                        });

                    b.Navigation("UserDetails")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
